(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{462:function(s,n,a){"use strict";a.r(n);var e=a(44),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_300-最长递增子序列-md"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_300-最长递增子序列-md"}},[s._v("#")]),s._v(" 300.最长递增子序列.md")]),s._v(" "),a("blockquote",[a("p",[s._v("标签： 数组、二分查找、动态规划")])]),s._v(" "),a("p",[s._v("给你一个整数数组 nums, 找到其中最长严格递增子序列的长度。")]),s._v(" "),a("p",[s._v("子序列是由数组派生而来的序列，删除（或者不删除）数组中的元素而不改变其余元素的顺序，例如：[3，6，2，7] 是数组 [0,3,1,6,2,2,7]的子序列。")]),s._v(" "),a("p",[s._v("示例1：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：nums = [10,9,2,5,3,7,101,18]\n输出：4\n解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("示例2：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：nums = [1,0,0,3,2,3]\n输出：4\n解释：最长递增子序列是 [0,1,2,3]，因此长度为 4 。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("示例 3：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：nums = [7,7,7,7,7,7,7]\n输出：1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("方法一：动态规划")]),s._v(" "),a("p",[s._v("思路与算法:")]),s._v(" "),a("p",[s._v("定义：dp[i]为考虑前i个元素，以第i个数字结尾的最长上升子序列的长度，"),a("strong",[s._v("注意nums[i]比须被选取")]),s._v("。")]),s._v(" "),a("p",[s._v("我们从小到大计算dp数组的值，在计算dp[i]之前，我们已经计算出来了 dp[0... i-1]的值，则状态转移方程为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("dp[i] = max(dp[j]) + 1 ,其中 0 ≤ j < i 且 nums[j] < nums[i]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("即考虑往 dp[0... i-1]中最长的上升子序列后面加一个 num[i]。由于 dp[j] 代表 nums[0...j]中以nums[j]结尾的最长上升子序列，所以如果能从dp[j]这个状态转移过来，那么num[i]必然要大于nums[j], 才能将num[i]放在num[j]后面得到更长的上升子序列。")]),s._v(" "),a("p",[s._v("最后，整个数组的最长上升子序列即所有dp[i]中的最大值。")])])}),[],!1,null,null,null);n.default=t.exports}}]);