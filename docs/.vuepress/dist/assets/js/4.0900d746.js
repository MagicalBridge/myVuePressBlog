(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{329:function(t,s,a){t.exports=a.p+"assets/img/01.5d04e220.png"},330:function(t,s,a){t.exports=a.p+"assets/img/02.0d92d8b4.png"},399:function(t,s,a){t.exports=a.p+"assets/img/03.7ec12667.png"},400:function(t,s,a){t.exports=a.p+"assets/img/04.098d8b8c.png"},401:function(t,s,a){t.exports=a.p+"assets/img/05.7d7ee661.png"},402:function(t,s,a){t.exports=a.p+"assets/img/06.b275aa02.png"},476:function(t,s,a){"use strict";a.r(s);var n=a(44),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一、vue内部机制剖析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、vue内部机制剖析"}},[t._v("#")]),t._v(" 一、Vue内部机制剖析")]),t._v(" "),n("p",[t._v("首先，我们整体的介绍下vue.js内部的整个运行流程，希望能让大家有一个整体的印象，然后我们再逐个模块进行讲解。从来没有了解过"),n("code",[t._v("vue.js")]),t._v("实现的同学可能会对一些内容感到疑惑，这是正常的，我们不妨有些耐心，耐心的将内容看完，再回来观看这一部分，相信会有收获的。")]),t._v(" "),n("p",[t._v("首先，我们来看下vue的内部运行流程图。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(329),alt:"vue内部运行机制"}})]),t._v(" "),n("p",[t._v("大家第一次看到这个图一定是一头雾水，没有关系，我们来逐个讲解一下这些模块的作用以及调用关系，相信大家对于"),n("code",[t._v("vue.js")]),t._v("内部运行机制会有一个大概的认识。")]),t._v(" "),n("h3",{attrs:{id:"初始化及挂载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化及挂载"}},[t._v("#")]),t._v(" 初始化及挂载")]),t._v(" "),n("p",[n("img",{attrs:{src:a(330),alt:"初始化挂载"}})]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("new Vue()")]),t._v("之后。Vue会调用 "),n("code",[t._v("_init")]),t._v(" 函数进行初始化，也就是这里的"),n("code",[t._v("init")]),t._v("过程，它会初始化生命周期、事件、props、methods、data、computed 与 watch等。其中最重要的是通过"),n("code",[t._v("Object.defineProperty")]),t._v("设置 "),n("code",[t._v("setter")]),t._v(" 与 "),n("code",[t._v("getter")]),t._v(" 函数，用来实现「"),n("strong",[t._v("响应式")]),t._v("」和「"),n("strong",[t._v("依赖收集")]),t._v("」。")]),t._v(" "),n("p",[t._v("初始化之后调用 "),n("code",[t._v("$mount")]),t._v(" 会挂载组件、如果是"),n("strong",[t._v("运行时编译")]),t._v("，即不存在 "),n("code",[t._v("render function")]),t._v(" 但是存在 template, 需要进行「编译」步骤。")]),t._v(" "),n("h3",{attrs:{id:"编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[t._v("#")]),t._v(" 编译")]),t._v(" "),n("p",[t._v("compile编译可以分为 parse、optimize与generate三个阶段，最终需要得到render function。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(399),alt:"编译过程"}})]),t._v(" "),n("h4",{attrs:{id:"parse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#parse"}},[t._v("#")]),t._v(" parse")]),t._v(" "),n("p",[t._v("parse 会用正则等方式解析 template 模板中的指令、class、style等数据，形成AST。")]),t._v(" "),n("h4",{attrs:{id:"optimize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optimize"}},[t._v("#")]),t._v(" optimize")]),t._v(" "),n("p",[t._v("optimize的主要作用是标记static静态节点，这是vue在编译过程中的一处优化，后面当 update 更新界面时，会有一个patch过程，diff算法会直接跳过静态节点，从而减少了比较的过程，优化了patch的性能。")]),t._v(" "),n("h4",{attrs:{id:"generate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generate"}},[t._v("#")]),t._v(" generate")]),t._v(" "),n("p",[t._v("generate 是将AST转化为 render function  字符串的过程，得到结果是 render的字符串以及staticRenderFns 字符串。")]),t._v(" "),n("p",[t._v("在经过 parse、optimize与generate 这三个阶段以后，组价中就会存在渲染Vnode所需要的 render function 了。")]),t._v(" "),n("h3",{attrs:{id:"响应式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式"}},[t._v("#")]),t._v(" 响应式")]),t._v(" "),n("p",[t._v("接下来也就是 vue.js的响应式核心部分")]),t._v(" "),n("p",[n("img",{attrs:{src:a(400),alt:"vue响应式"}})]),t._v(" "),n("p",[t._v("这里的"),n("code",[t._v("getter")]),t._v("和"),n("code",[t._v("setter")]),t._v("已经在之前介绍过了，在"),n("code",[t._v("init")]),t._v("的时候通过"),n("code",[t._v("Object.defineProperty")]),t._v(" 进行了绑定，它使得当被设置的对象读取的时候会执行"),n("code",[t._v("getter")]),t._v("函数，而当被赋值的时候执行"),n("code",[t._v("setter")]),t._v("函数。")]),t._v(" "),n("p",[t._v("当"),n("code",[t._v("render function")]),t._v(" 被渲染的时候，因为会读取所需对象的值，所以会触发 "),n("code",[t._v("getter")]),t._v("函数进行「"),n("strong",[t._v("依赖收集")]),t._v("」，「"),n("strong",[t._v("依赖收集")]),t._v("」的目的是将观察者 Watcher 对象存放到当前订阅者 Dep的subs 中，形成如下所示的这样一个关系。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(401),alt:"依赖收集关系图"}})]),t._v(" "),n("p",[t._v("在修改对象的值的时候，会触发对应的 "),n("code",[t._v("setter")]),t._v("，"),n("code",[t._v("setter")]),t._v(" 通知之前「"),n("strong",[t._v("依赖收集")]),t._v("」得到的Dep中的每一个Watcher，告诉它们自己的值改变了，需要重新渲染视图。这个时候这些Watcher就开始调用"),n("code",[t._v("update")]),t._v("来更新视图。当然这中间还有一个"),n("code",[t._v("patch")]),t._v("的过程以及使用队列来异步更新策略。这个后面我们会做详细介绍。")]),t._v(" "),n("h3",{attrs:{id:"virtual-dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[t._v("#")]),t._v(" Virtual DOM")]),t._v(" "),n("p",[t._v("我们知道，render function 会被转化为 Vnode 节点。Virtual DOM 其实就是一颗以JavaScript对象（VNode节点）作为基础的树，用对象属性来描述节点，实际上它只是一层真实DOM的抽象。最终可以通过一系列操作使这颗树映射到真实环境上。由于Virtual DOM是以JavaScript对象为基础而不依赖真实平台环境，所以它具有跨平台的能力，比如浏览器平台、Weex、Node等。")]),t._v(" "),n("p",[t._v("比如说下面这样一个例子:")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("{\n  tag: 'div',                 /*说明这是一个div标签*/\n  children: [                 /*存放该标签的子节点*/\n    {\n      tag: 'a',               /*说明这是一个a标签*/\n      text: 'click me'        /*标签的内容*/\n    }\n  ]\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("渲染后可以得到")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<div>\n  <a>click me</a>\n</div>\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("p",[t._v("这只是一个简单的例子，实际上的节点有更多的属性来标志节点，比如isStatic(代表是否为静态节点)、isComponent （代表是否为注释节点）等。")]),t._v(" "),n("h3",{attrs:{id:"更新视图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#更新视图"}},[t._v("#")]),t._v(" 更新视图")]),t._v(" "),n("p",[n("img",{attrs:{src:a(402),alt:"更新视图"}})]),t._v(" "),n("p",[t._v("前面我们说到，在修改一个对象值的时候，会通过 setter -> Watcher -> update 的流程来修改对应的视图，那么最终是如何更新视图的呢？")]),t._v(" "),n("p",[t._v("当数据变化后，执行 render function 就可以得到一个新的VNode节点，然后用innerHTML 直接渲染到真实的DOM。 但是其实我们只对其中的一小块内容进行修改，这样做似乎有些 「"),n("strong",[t._v("浪费")]),t._v("」。")]),t._v(" "),n("p",[t._v("那么我们为什么不能只修改那些「改变了的地方」呢？这个时候就要介绍「patch」了。我们会将新的 VNode 与旧的 VNode 一起传入 patch 进行比较。经过diff算法得出它们的「"),n("strong",[t._v("差异")]),t._v("」。最后我们只需要将这些「"),n("strong",[t._v("差异")]),t._v("」的对应DOM 进行修改即可。")]),t._v(" "),n("h3",{attrs:{id:"再看全局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#再看全局"}},[t._v("#")]),t._v(" 再看全局")]),t._v(" "),n("p",[n("img",{attrs:{src:a(329),alt:"vue内部运行机制"}})]),t._v(" "),n("p",[t._v("回过头再来看看这张图，是不是大脑中已经有一个大概的脉络了呢？")]),t._v(" "),n("p",[t._v("那么，让我们继续学习每一个模块吧!")]),t._v(" "),n("h2",{attrs:{id:"二、响应式系统的基本原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、响应式系统的基本原理"}},[t._v("#")]),t._v(" 二、响应式系统的基本原理")]),t._v(" "),n("h3",{attrs:{id:"响应式系统"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#响应式系统"}},[t._v("#")]),t._v(" 响应式系统")]),t._v(" "),n("p",[t._v("vue.js数据模型仅仅是普通的JavaScript对象，但是对这些对象进行操作时，却能影响对应视图，它的核心就是「"),n("strong",[t._v("响应式系统")]),t._v("」。尽管我们在使用vue.js进行开发时候不会直接修改「"),n("strong",[t._v("响应式系统")]),t._v("」，但是理解它的实现有助于避开一些常见的 「坑」，也有助于在遇见一些琢磨不透的问题可以深入其原理来解决它。")]),t._v(" "),n("h3",{attrs:{id:"object-defineproperty"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty"}},[t._v("#")]),t._v(" "),n("code",[t._v("Object.defineProperty")])]),t._v(" "),n("p",[t._v("首先我们介绍下 "),n("code",[t._v("Object.defineProperty")]),t._v(",vue.js就是基于它实现「响应式系统」的。")]),t._v(" "),n("p",[t._v("首先是使用方法")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * obj: 目标对象\n * prop: 需要操作的目标对象的属性名 \n * descriptor: 描述符\n * return value 传入对象\n */")]),t._v("\nObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("descriptor的一些属性，简单介绍几个属性，具体可以参考 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN 文档"),n("OutboundLink")],1),t._v("。")]),t._v(" "),n("ul",[n("li",[t._v("enumerable, 属性是否可以枚举，默认是false")]),t._v(" "),n("li",[t._v("configurable, 属性是否可以被修改或者删除，默认是false。")]),t._v(" "),n("li",[t._v("get，获取属性的方法。")]),t._v(" "),n("li",[t._v("set，设置属性的方法。")])]),t._v(" "),n("h3",{attrs:{id:"实现-observer-可观察的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现-observer-可观察的"}},[t._v("#")]),t._v(" 实现 observer(可观察的)")]),t._v(" "),n("p",[t._v("知道了 "),n("code",[t._v("Object.defineProperty")]),t._v(" 以后，我们来用它使对象变成可观察的。")]),t._v(" "),n("p",[t._v("在init阶段会进行初始化，对数据进行「"),n("strong",[t._v("响应式化")]),t._v("」。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(330),alt:"初始化挂载"}})]),t._v(" "),n("p",[t._v("为了方便理解，我们不考虑数组等复杂的情况，只对对象进行处理。")]),t._v(" "),n("p",[t._v("首先我们定义一个cb函数， 这个函数用来模拟视图更新，调用它即代表更新视图，内部可以是一些更新视图的方法。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 渲染视图 */")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"视图更新啦～"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("然后我们定义一个 "),n("code",[t._v("defineReactive")]),t._v(" 方法, 这个方法通过 "),n("code",[t._v("Object.defineProperty")]),t._v("来实现对对象「"),n("strong",[t._v("响应式")]),t._v("」化，入参是一个obj（需要绑定的对象），key（obj的某一个属性），val（具体的值）。经过 "),n("code",[t._v("defineReactive")]),t._v(" 处理之后，我们的obj的key属性在「读」的时候会触发 "),n("code",[t._v("reactiveGetter")]),t._v("方法，而在该属性被「写」的时候会触发 "),n("code",[t._v("reactiveSetter")]),t._v(" 方法。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineReactive")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("       "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 属性可枚举 */")]),t._v("\n    configurable"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 属性可被修改或删除 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 实际上会依赖收集，下一小节会讲 */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newVal")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" val"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("cb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("p",[t._v("当然这还是不够的，我们需要在上面再封装一层 "),n("code",[t._v("observer")]),t._v("。这个函数传入一个value（需要『"),n("strong",[t._v("响应式")]),t._v("』化的对象），通过遍历所有属性的方式对该对象的每一个属性都通过 "),n("code",[t._v("defineReactive")]),t._v(" 处理。（注：实际上observer 会进行递归调用，为了便于理解去掉了递归的过程 ）")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("最后，让我们用"),n("code",[t._v("oberve")]),t._v("来封装一个Vue吧")]),t._v(" "),n("p",[t._v("在Vue的构造函数中，对options的data处理，这里的data大家都很熟悉，就是平时我们写在Vue项目中的data属性(实际上是一个函数，这里当做一个对象来处理)。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* vue的构造类 */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("optioons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("这样我们只要new 一个 Vue对象，就会将data中的数据，进行「响应式」化。如果我们对data的属性进行下面的操作，就会触发cb方法更新视图。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" o "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\no"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*视图更新了*/")]),t._v(" \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("至此，响应式原理已经介绍完毕了，接下来我们来介绍「响应式系统」的另一部分 —— 「依赖收集」。")])])}),[],!1,null,null,null);s.default=e.exports}}]);