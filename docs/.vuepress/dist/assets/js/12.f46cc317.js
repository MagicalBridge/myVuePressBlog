(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{361:function(t,s,a){t.exports=a.p+"assets/img/01.cc5bf72e.png"},362:function(t,s,a){t.exports=a.p+"assets/img/02.b89a222c.png"},422:function(t,s,a){"use strict";a.r(s);var r=a(44),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),r("p",[t._v("要存储多个元素，数组可能是最常用的数据结构。几乎每种语言都实现了数组。这种数据结构非常方便，提供了一个便利的"),r("code",[t._v("[]")]),t._v("语法来访问其元素。然而，这种数据结构有一个缺点："),r("strong",[t._v("在大多数语言中")]),t._v("数组的大小是固定的，从数组的起点或中间插入或移除项的成本很高，因为需要移动元素。（尽管我们已经学过，JavaScript 有来自 Array 类的方法可以帮我们做这些事，但背后的情况同样如此。）")]),t._v(" "),r("p",[t._v("链表存储有序的元素集合，但不同于数组，链表中的元素在内存中并不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针或链接）组成。下图展示了一个链表的结构。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(361),alt:"链表示意图"}})]),t._v(" "),r("p",[t._v("相对于传统的数组，链表的一个好处在于，添加或移除元素的时候不需要移动其他元素。然而，链表需要使用指针，因此实现链表时需要额外注意。在数组中，我们可以直接访问任何位置的任何元素，"),r("strong",[t._v("而要想访问链表中间的一个元素，则需要从起点（表头）开始迭代链表直到找到所需的元素。")])]),t._v(" "),r("p",[t._v("生活中用来说明链表的最流行的例子，那就是火车。一列火车是由一系列车厢（也称车皮）组成的。每节车厢或车皮都相互连接。你很容易分离一节车皮，改变它的位置、添加或移除它。下图演示了一列火车。每节车皮都是链表的元素，车皮间的连接就是指针。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(362),alt:"链表火车头"}})]),t._v(" "),r("h2",{attrs:{id:"创建链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建链表"}},[t._v("#")]),t._v(" 创建链表")]),t._v(" "),r("p",[t._v("我们首先搭建骨架, 我们要实现一个名为 indexOf 的方法，它使得我们能够在链表中找到一个特定的元素。")])])}),[],!1,null,null,null);s.default=e.exports}}]);