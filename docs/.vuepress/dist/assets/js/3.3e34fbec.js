(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{366:function(e,s,a){e.exports=a.p+"assets/img/05.c4971390.jpg"},367:function(e,s,a){e.exports=a.p+"assets/img/01.fb31894c.png"},368:function(e,s,a){e.exports=a.p+"assets/img/02.74580573.png"},369:function(e,s,a){e.exports=a.p+"assets/img/03.954f29da.png"},370:function(e,s,a){e.exports=a.p+"assets/img/04.b0d8ec4c.png"},371:function(e,s,a){e.exports=a.p+"assets/img/06.dedf68c3.png"},414:function(e,s,a){"use strict";a.r(s);var r=a(44),t=Object(r.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),r("h2",{attrs:{id:"什么是docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是docker"}},[e._v("#")]),e._v(" 什么是Docker")]),e._v(" "),r("p",[e._v("Docker 是一个开源的应用容器引擎。开发者可以将自己的应用打包在自己的镜像里面，然后迁移到其他平台的 Docker 中。镜像中可以存放你自己自定义的运行环境，文件，代码，设置等等内容，再也不用担心环境造成的运行问题。镜像共享运行机器的系统内核。")]),e._v(" "),r("p",[e._v("同样， Docker 也支持跨平台。你的镜像也可以加载在 Windows 和 Linux，实现快速运行和部署。")]),e._v(" "),r("h2",{attrs:{id:"docker解决了什么问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker解决了什么问题"}},[e._v("#")]),e._v(" Docker解决了什么问题")]),e._v(" "),r("p",[e._v("一句话，解决了运行环境和配置问题的"),r("strong",[e._v("软件容器")]),e._v("，方便于持续集成并有助于整体发布推动软件虚拟化技术。")]),e._v(" "),r("h2",{attrs:{id:"docker三要素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker三要素"}},[e._v("#")]),e._v(" Docker三要素")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("镜像 (image)")]),e._v(":")])]),e._v(" "),r("p",[e._v("Docker镜像就是一个"),r("strong",[e._v("只读")]),e._v("的模板，镜像可以用来创建docker容器，一个镜像可以创建很多容器。")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("容器（Container）")])])]),e._v(" "),r("p",[e._v("Docker利用容器（Container）独立运行的一个或者一组应用，容器是用镜像创建爱你的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证平台的安全。可以把容器看成是一个简单的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。容器的定义几乎和镜像一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("仓库")])])]),e._v(" "),r("p",[e._v("是集中存放镜像的地方,我们可以把镜像发布到仓储中，需要的时候从仓储中拉取下来就可以了。")]),e._v(" "),r("h2",{attrs:{id:"docker架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker架构"}},[e._v("#")]),e._v(" Docker架构")]),e._v(" "),r("p",[r("img",{attrs:{src:a(366),alt:"docker架构"}})]),e._v(" "),r("h2",{attrs:{id:"docker安装-centos7"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker安装-centos7"}},[e._v("#")]),e._v(" Docker安装 (CentOS7)")]),e._v(" "),r("p",[e._v("在Docker安装之前，我们首先安装"),r("code",[e._v("device-mapper-persistent-data")]),e._v(" 和 "),r("code",[e._v("lvm2")]),e._v(" 两个依赖。")]),e._v(" "),r("p",[r("code",[e._v("device-mapper-persistent-data")]),e._v(" 是 "),r("code",[e._v("Lunix")]),e._v("下的一个存储驱动，Linux 上的高级存储技术。")]),e._v(" "),r("p",[r("code",[e._v("lvm2")]),e._v(" 的作用是创建逻辑磁盘分区，这里我们使用CentOS的Yum包管理工具安装两个依赖。")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("yum "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y yum-utils device-mapper-persistent-data lvm2\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[r("img",{attrs:{src:a(367),alt:"前置依赖"}})]),e._v(" "),r("p",[e._v("依赖安装完毕后，我们将阿里云的 Docker 镜像源添加进去。可以加速 Docker 的安装。")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[e._v("最后安装 docker")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("yum "),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker-ce -y\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[r("img",{attrs:{src:a(368),alt:"docker安装完毕"}})]),e._v(" "),r("p",[e._v("接着执行一下 "),r("code",[e._v("docker -v")]),e._v(" ，这条命令可以用来查看 Docker 安装的版本信息。当然也可以帮助我们查看 docker 安装状态。如果正常展示版本信息，代表 Docker 已经安装成功。")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("docker -v\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[r("img",{attrs:{src:a(369),alt:"验证版本"}})]),e._v(" "),r("h2",{attrs:{id:"docker安装-hello-world镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker安装-hello-world镜像"}},[e._v("#")]),e._v(" Docker安装 hello-world镜像")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[e._v("docker run hello-world\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[r("img",{attrs:{src:a(370),alt:"hello-world"}})]),e._v(" "),r("p",[e._v("从图中展示的信息可以看到，在执行run命令的时候，首先会从本地查找镜像，发现在本地没有找到，就去仓库中寻找，下载之后，基于这个镜像创建一个容器。")]),e._v(" "),r("h2",{attrs:{id:"docker的常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker的常用命令"}},[e._v("#")]),e._v(" Docker的常用命令")]),e._v(" "),r("p",[e._v("帮助命令")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 帮助命令")]),e._v("\ndocker --help\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br")])]),r("p",[e._v("列出本地主机上的所有镜像")]),e._v(" "),r("div",{staticClass:"language-shell line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 列出本地主机上的所有镜像")]),e._v("\ndocker images\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br")])]),r("p",[r("img",{attrs:{src:a(371),alt:"镜像"}})]),e._v(" "),r("p",[e._v("各个选项说明:")]),e._v(" "),r("ul",[r("li",[e._v("REPOSITORY: 表示镜像仓库")]),e._v(" "),r("li",[e._v("TAG: 镜像标签")]),e._v(" "),r("li",[e._v("IMAGE ID: 镜像id")]),e._v(" "),r("li",[e._v("CREATED: 镜像创建时间")]),e._v(" "),r("li",[e._v("SIZE: 镜像大小")])]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),r("p",[e._v("同一个仓库可以有多个TAG，代表这个仓库源的不同个版本，我们使用"),r("code",[e._v("REPOSITORY:TAG")]),e._v(" 来定义不同的镜像。如果你不指定一个镜像的版本标签，将默认是使用最新的版本。")])])])}),[],!1,null,null,null);s.default=t.exports}}]);