(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{456:function(s,e,t){"use strict";t.r(e);var a=t(44),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"_144-二叉树的前序遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_144-二叉树的前序遍历"}},[s._v("#")]),s._v(" 144.二叉树的前序遍历")]),s._v(" "),t("blockquote",[t("p",[s._v("标签：栈、树、深度优先搜索、二叉树")])]),s._v(" "),t("p",[s._v("给你一个二叉树的根节点 "),t("code",[s._v("root")]),s._v(", 返回它节点的值的前序遍历。")]),s._v(" "),t("p",[s._v("示例1:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：root = [1,null,2,3]\n输出：[1,2,3]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("示例2:")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：root = []\n输出：[]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("示例3：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("输入：root = [1]\n输出：[1]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("对于遍历操作来说，两棵子树都需要顾及, 所谓的前序遍历，就是先要访问自己，然后访问左孩子，访问右孩子。")]),s._v(" "),t("p",[s._v("栈这种数据结构有一个非常重要的应用，就是在调用子过程的时候，会将当前的执行环境压入栈中，方便子过程执行完毕之后，重新将这个执行环境从栈中拿出来继续执行。")]),s._v(" "),t("p",[s._v("我们借助栈这种数据结构就是帮助我们记录下面应该访问哪个节点。")])])}),[],!1,null,null,null);e.default=n.exports}}]);