(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{389:function(t,n,s){t.exports=s.p+"assets/img/01.1a579f9f.jpeg"},457:function(t,n,s){"use strict";s.r(n);var e=s(44),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出"),e("strong",[t._v("所有")]),t._v("从 根节点 到 叶子节点 路径总和等于给定目标和的路径。")]),t._v(" "),e("p",[t._v("叶子节点 是指没有子节点的节点。")]),t._v(" "),e("p",[t._v("示例 1：\n"),e("img",{attrs:{src:s(389),alt:"示例1"}})]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n输出：[[5,4,11,2],[5,8,4,5]]\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("blockquote",[e("p",[t._v("标签: 树 深度优先搜索 递归回溯")])]),t._v(" "),e("p",[t._v("前言：\n注意到本题的要求是，找出所有满足从 「根节点」到某个 「叶子节点」经过的路径上的节点之和等于目标和的路径。核心思想是对树进行一次遍历，在遍历时候记录从根节点到当前节点的路径和，以防止重复计算。")]),t._v(" "),e("p",[t._v("方法一：深度优先搜索\n思路以及算法")]),t._v(" "),e("p",[t._v("我们可以采用深度优先搜索的方式，枚举每一条从根节点到叶子节点的路径。当我们遍历到叶子节点，且此时路径和恰好为目标和时候，我们就找到了一条满足条件的路径。")])])}),[],!1,null,null,null);n.default=a.exports}}]);